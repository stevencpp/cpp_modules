<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<CppM_TargetsPath 		Condition="'$(CppM_TargetsPath)' 	  ==''">c:\Program Files\cpp_modules\etc\</CppM_TargetsPath>
		<CppM_BinPath			Condition="'$(CppM_BinPath)'		  ==''">$(CppM_TargetsPath)\..\bin\</CppM_BinPath>
		<CppM_ClangPath       	Condition="'$(CppM_ClangPath)'        ==''">c:\Program Files\LLVM\bin</CppM_ClangPath>
		<CppM_ClangScanDepsPath Condition="'$(CppM_ClangScanDepsPath)'==''">$(CppM_ClangPath)\clang-scan-deps.exe</CppM_ClangScanDepsPath>
		<CppM_NinjaExePath 		Condition="'$(CppM_NinjaExePath)'	  ==''">$(VCIDEInstallDir)\..\CommonExtensions\Microsoft\CMake\Ninja\ninja.exe</CppM_NinjaExePath>
		
		<CppM_IntDir_FullPath>$(MSBuildProjectDirectory)\$(IntDir)</CppM_IntDir_FullPath>
		<CppM_IntDir_FullPath Condition="$([System.IO.Path]::IsPathRooted('$(IntDir)'))">$(IntDir)</CppM_IntDir_FullPath>
		
		<CppM_CMI_Path>$(CppM_IntDir_FullPath)</CppM_CMI_Path>
		<CppM_TLogLocation_FullPath>$(MSBuildProjectDirectory)\$(TLogLocation)</CppM_TLogLocation_FullPath>
		<!-- todo: maybe we could use the same db for all platforms/configurations ? prefix the target names with it ? !-->
		<CppM_DB_Path>$(SolutionDir)\intermediate\$(Configuration)\$(Platform)</CppM_DB_Path>
		
		<CppM_CMI_Ext>.ifc</CppM_CMI_Ext>
		<CppM_Mdef_Suffix>_mdef.json</CppM_Mdef_Suffix>
	</PropertyGroup>
	
	<!-- with the default VS clang toolset the tools are specified without their full paths !-->
	<PropertyGroup Condition="'$(PlatformToolset)' == 'ClangCL'">
		<CLToolExe>$(CppM_ClangPath)\clang-cl.exe</CLToolExe>
		<LinkToolExe>$(CppM_ClangPath)\lld-link.exe</LinkToolExe>
		<LibToolExe>$(CppM_ClangPath)\llvm-lib.exe</LibToolExe>
	</PropertyGroup>
	
	<ItemDefinitionGroup>
		<ClCompile Condition="'$(PlatformToolset)'!='llvm' and '$(PlatformToolset)'!='ClangCl'">
			<EnableModules>true</EnableModules>
			<LanguageStandard>stdcpplatest</LanguageStandard>
		</ClCompile>
	</ItemDefinitionGroup>
	
	<ItemGroup>
		<CppM_CurrentProject Include="$(ProjectPath)"> <Project>$(ProjectGuid)</Project> </CppM_CurrentProject>
		<PropertyPageSchema Include="$(CppM_TargetsPath)cpp_modules.xml" />
	</ItemGroup>
	
	<ItemGroup>
		<!-- for header units listed via CMake !-->
		<ClInclude Remove="$(CppM_Legacy_Headers)" />
		<ClCompile Include="$(CppM_Legacy_Headers)">
			<CppM_Header_Unit>true</CppM_Header_Unit>
		</ClCompile>
		<!-- for header units listed via the project properties, but the following is an error !-->
		<!--<CppM_Legacy_Headers Include="@(CLCompile)" Condition="'%(ClCompile.CppM_Header_Unit)' == 'true'" />!-->
	</ItemGroup>
	
	<UsingTask TaskName="CppM_CL" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
		<ParameterGroup>
			<CL_Input_All ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<CL_Input_Manually_Selected ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<CurrentProjectHolder ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<ProjectReference ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<SolutionFilePath ParameterType="System.String" Required="true" />
			<Configuration ParameterType="System.String" Required="true" />
			<Platform ParameterType="System.String" Required="true" />
			<PlatformToolset ParameterType="System.String" Required="true" />
			<ClangScanDepsPath ParameterType="System.String" Required="true" />
			<IntDir ParameterType="System.String" Required="true" />
			<NinjaExecutablePath ParameterType="System.String" Required="true" />
			<DB_Path ParameterType="System.String" Required="true" />
			<JustCleanItems ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<!-- for the CL task !-->
			<!-- with LLVM and both VS2017 and VS2019 installed, VCTargetsPath is set to an escaped version of the VS2017 targets path,
				e.g "C:\Program Files %28x86%29" which is invalid and fails to load if not unescaped !-->
			<Reference Include="$([MSBUILD]::Unescape($(VCTargetsPath)Microsoft.Build.CppTasks.Common.dll))"/>
			<!-- for JavaScriptSerializer !-->
			<Reference Include="System.Web.Extensions" />
			<!-- for ProjectCollections / walking the project tree !-->
			<Reference Include="System.Xml" />
			<Reference Include="Microsoft.Build" />
			<!-- for the MSBuild task !-->
			<Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"/>
			<!-- for Newtonsoft.Json !-->
			<Reference Include="$(CppM_BinPath)Newtonsoft.Json.dll" />
			<!-- cppm_scanner !-->
			<Reference Include="$(CppM_BinPath)cppm_scanner_cs.dll" />
			
			<Code Type="Class" Language="cs" Source="$(CppM_TargetsPath)cpp_modules.cs" />
		</Task>
	</UsingTask>

	<!-- when the user manually selects a particular file to compile, ClCompile is modified to contain only that file
		 but we need to scan everything anyway so save a copy of it before that happens in SelectClCompile !-->
	<!-- this target is also executed when building the project subtree, and so the PreBuildEvent
		 needs to run first e.g to generate sources / update cmake !-->
	<Target Name="CppM_PreProcess"
		Condition="'@(ClCompile)' != ''"
		BeforeTargets="SelectClCompile;CppM_BeforeClean"
		DependsOnTargets="FixupCLCompileOptions;PreBuildEvent">
		<!-- <Message Text="module preprocess: @(ClCompile)" Importance="High"/> !-->
		
		<!-- generated from the CL task Microsoft.CppCommon.targets' ClCompile target 
			 by replacing the regex ' +(\w+) +="([^"]+)"' with '<\1>\2</\1>'  !-->
		<ItemGroup>
			<CppM_CL_Input_All Include="@(ClCompile)" Condition="'%(ClCompile.PrecompiledHeader)' != 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == '' and @(ClCompile) != ''">
				<CppM_ModuleDefinitionFile>$(CppM_IntDir_FullPath)%(CLCompile.FileName)$(CppM_Mdef_Suffix)</CppM_ModuleDefinitionFile>
				<CppM_CMI_File>$(CppM_IntDir_FullPath)%(Filename).ifc</CppM_CMI_File>
				<CppM_ObjectFilePath>$(CppM_IntDir_FullPath)%(Filename).obj</CppM_ObjectFilePath>
				<BuildingInIDE>$(BuildingInsideVisualStudio)</BuildingInIDE>
				<!--<Sources>@(ClCompile)</Sources>!-->
				<Sources>%(ClCompile.FullPath)</Sources>
				<ExcludedInputPaths>$(ExcludePath)</ExcludedInputPaths>
				<TLogReadFiles>@(CLTLogReadFiles)</TLogReadFiles>
				<TLogWriteFiles>@(CLTLogWriteFiles)</TLogWriteFiles>
				<ToolExe>$(CLToolExe)</ToolExe>
				<ToolPath>$(CLToolPath)</ToolPath>
				<TrackFileAccess>$(TrackFileAccess)</TrackFileAccess>
				<ToolArchitecture>$(CLToolArchitecture)</ToolArchitecture>
				<TrackerFrameworkPath>$(CLTrackerFrameworkPath)</TrackerFrameworkPath>
				<TrackerSdkPath>$(CLTrackerSdkPath)</TrackerSdkPath>
				<TrackedInputFilesToIgnore>@(ClNoDependencies)</TrackedInputFilesToIgnore>
				<DeleteOutputOnExecute>$(CLDeleteOutputOnExecute)</DeleteOutputOnExecute>
				<YieldDuringToolExecution>$(ClYieldDuringToolExecution)</YieldDuringToolExecution>
			</CppM_CL_Input_All>
		</ItemGroup>
		
		<MakeDir Directories="$(TLogLocation)pp;$(TLogLocation)src" />
	</Target>
  
	<Target Name="ClCompile"
		  Condition="'@(ClCompile)' != ''"
		  DependsOnTargets="SelectClCompile">
		<!-- <Message Text="clcompile: @(ClCompile)" Importance="High"/> !-->

		<CppM_CL
			CL_Input_All="@(CppM_CL_Input_All)"
			CL_Input_Manually_Selected="@(SelectedFiles)"
			CurrentProjectHolder="@(CppM_CurrentProject)"
			ProjectReference="@(ProjectReference)" 
			SolutionFilePath="$(SolutionPath)"
			Configuration="$(Configuration)"
			Platform="$(Platform)"
			PlatformToolset="$(PlatformToolset)"
			ClangScanDepsPath="$(CppM_ClangScanDepsPath)"
			IntDir="$(CppM_IntDir_FullPath)"
			NinjaExecutablePath="$(CppM_NinjaExePath)"
			DB_Path="$(CppM_DB_Path)"
			JustCleanItems="false"
		/>
		
		<!-- CppM_StopBuild intentionally does not exist so that an error really stops 
			not only the current build but also the build for any projects that reference this project. !-->
		<OnError ExecuteTargets="CppM_StopBuild"/>
	</Target>
  
	<PropertyGroup>
		<CleanDependsOn> CppM_BeforeClean; $(CleanDependsOn); </CleanDependsOn>
	</PropertyGroup>
	<Target Name="CppM_BeforeClean">
		<!-- <Message Text="CppM_BeforeClean" Importance="High"/> !-->
		<ItemGroup>
			<CppM_To_Delete_In_IntDir Include="pp.modulemap;pp_commands.json;module_map.json;build.ninja;build_rec.ninja" />
			<CppM_To_Delete Include="@(CppM_To_Delete_In_IntDir->'$(CppM_IntDir_FullPath)%(FileName)%(Extension)')" />
			<CppM_To_Delete Include="$(TLogLocation)pp\*;$(TLogLocation)src\*" />
			<CppM_To_Delete Include="@(CppM_CL_Input_All->'%(ObjectFileName)%(FileName).i')" />
			<CppM_To_Delete Include="$(CppM_CMI_Path)*$(CppM_CMI_Ext)" />
			<CppM_To_Delete Include="@(CppM_CL_Input_All->'%(CppM_ModuleDefinitionFile)')" />
		</ItemGroup>
		<Delete Files="@(CppM_To_Delete)" />
		<!-- the item OOD data is stored in the DB but we can't just delete that because it's shared with other targets !-->
		<CppM_CL
			CL_Input_All="@(CppM_CL_Input_All)"	CL_Input_Manually_Selected="" CurrentProjectHolder="@(CppM_CurrentProject)" 
			ProjectReference=""  SolutionFilePath="x" Configuration="x" Platform="x" PlatformToolset="x" ClangScanDepsPath="x" 
			IntDir="x" NinjaExecutablePath="x" DB_Path="$(CppM_DB_Path)" JustCleanItems="true"
		/>
	</Target>
	
	<!-- without this VS sometimes fails notice that the project is out of date !-->
	<Target Name="CppM_BuildState_Workaround" AfterTargets="Build">
		<Delete Files="$(TLogLocation)$(ProjectName).lastbuildstate" /> 
	</Target>
	
</Project>
