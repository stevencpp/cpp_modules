name: C/C++ CI

on: [push]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_GIT_HASH: 29def6aa636a9985d068aa4624172720c0005e09
      VCPKG_DEPS: fmt lmdb nlohmann-json catch2 range-v3 clara reproc
    
    strategy:
      fail-fast: false
      matrix:
        name: [
          windows,
          linux,
        ]
        
        include:
          - name: windows
            os: windows-latest
            exe-suffix: .exe
          - name: linux
            os: ubuntu-18.04
            exe-suffix:

    steps:
    - uses: actions/checkout@v1
    
    - name: init
      id: init
      shell: bash
      run: |
        # only rebuild clang-scan-deps if new commits are pushed to the llvm fork
        git ls-remote https://github.com/stevencpp/llvm-project.git master > csd.lock
        
        # rebuild the deps when the build environment changes
        # if env.lock changes then the cache will be invalidated
        echo "${{ runner.os }}" > env.lock
        
        # bash always prepends its own paths when starting steps
        # so we save the build environment to env.sh and restore it later
        # clang-scan-deps and the tests need llvm and ninja to build
        if [ "$RUNNER_OS" = "Windows" ]; then
          curl -fsSL -o LLVM9.exe https://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe
          7z x LLVM9.exe -y -o"C:/Program Files/LLVM"
          export PATH="/c/Program Files/LLVM/bin:$PATH"
          clang-cl --version
          
          # run vcvarsall (for ninja to work) and save the environment to env.sh:
          .github/workflows/vs_env.bat x64
          source env.sh
          cl >> env.lock 2>&1
          
          cl >> vsmodules.lock 2>&1
          ifc_dir="$(dirname "`which cl`")/../../../ifc/x64"
          # when saving the cache, the path needs to be in windows format (bug?) 
          ifc_dir="$(echo "$ifc_dir" | sed -e 's/^\///' -e 's/\//\\/g' -e 's/^./\0:/')"
          echo "::set-output name=vsmodules-dir::$ifc_dir"
        else
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main' -y
          sudo apt-get update -q
          sudo apt-get install -y clang-9 lld-9 libc++-9-dev libc++abi-9-dev clang-tools-9
          export CXX=clang++-9; export CC=clang-9;
          #export CXXFLAGS="-stdlib=libc++ -fsanitize=address,undefined";
          export CXXFLAGS="-stdlib=libc++"
          export CSD_CXXFLAGS="-stdlib=libc++"
          export LDFLAGS="-stdlib=libc++ -fuse-ld=lld";
          # apt fetches a new version of the compiler every few days
          # e.g clang version 9.0.1-+20191121055306+d1f4d6a4934-1~exp1~20191121045841.88
          # don't rebuild unless it's a new release
          $CXX --version | sed 's/-.*//' >> env.lock 2>&1
          echo "$CXXFLAGS $CFLAGS $LDFLAGS" >> env.lock
          
          export CMAKE_VERSION=3.15.5
          export CMAKE_ID=cmake-$CMAKE_VERSION-Linux-x86_64
          curl -fsSL -o cmake.tar.gz "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/$CMAKE_ID.tar.gz"
          tar -zxf cmake.tar.gz
          export PATH=$PWD/$CMAKE_ID/bin:$PATH
          whereis cmake
          
          curl -fsSL -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          sudo 7z x ninja.zip -o/usr/local/bin
          ninja --version
          
          #sudo apt-get install -y ccache
          
          export -p > env.sh
        fi
        
        cmake --version >> env.lock 2>&1
        echo "=== env.lock ==="
        cat env.lock
        
        echo "$VCPKG_HASH $VCPKG_DEPS" >> vcpkg.lock
  
    - name: clang-scan-deps cache
      uses: actions/cache@v1
      id: cache-csd
      with:
        path: csd
        key: ${{ runner.os }}-csd-2-${{ hashFiles('**\csd.lock') }}
    
    - name: clang-scan-deps build
      if: steps.cache-csd.outputs.cache-hit != 'true'
      shell: bash
      run: |
        source env.sh
        export CXXFLAGS="$CSD_CXXFLAGS"
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          export CXX=clang-cl && export CC=clang-cl
          export CMAKE_LINKER=-DCMAKE_LINKER=lld-link
          set
        fi
        
        git clone --depth 1 https://github.com/stevencpp/llvm-project.git
        
        mkdir csd
        mkdir llvm-build
        cd llvm-build
        
        cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;libcxx;libcxxabi;libunwind;compiler-rt;lld' \
          -DLLVM_ENABLE_MODULES=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE $CMAKE_LINKER
        ninja clang-scan-deps${{ matrix.exe-suffix }}
        cp bin/clang-scan-deps* ../csd

        ninja `ninja -t targets all | grep cmake_object_order_depends_target | sed 's/: phony//' | tr '\n' ' '`
        cd ..
        mkdir scan
        find llvm-build -regextype posix-extended \
          -regex '.*\.(c|cc|cpp|cxx|def|h|hh|hpp|hxx|inc|S)$' \
          -exec cp --parents {} scan \;
        cp --parents llvm-build/compile_commands.json scan
        find llvm-project -regextype posix-extended \
          -not -regex '.*/(test|INPUTS|docs).*' -and \
          -regex '.*\.(c|cc|cpp|cxx|def|h|hh|hpp|hxx|inc|S)$' \
          -exec cp --parents {} scan \;
        cp --parents llvm-project/lld/unittests/MachOTests/empty_obj_x86_armv7.txt scan
        mv scan csd
        
    - name: clang-scan-deps upload
      if: steps.cache-csd.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@master
      with:
        name: clang-scan-deps-${{ matrix.name }}
        path: csd/clang-scan-deps${{ matrix.exe-suffix }}
    
    - name: llvm-scanner-input upload
      if: steps.cache-csd.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@master
      with:
        name: llvm-scanner-input-${{ matrix.name }}
        path: csd/scan
    
    - name: vcpkg cache
      uses: actions/cache@v1
      id: cache-vcpkg
      with:
        path: vcpkg
        # if the vcpkg hash or the set of dependencies change,
        # restore the most recently saved cache for the environment
        # if the build environment changes then start from scratch
        key: vcpkg-${{ hashFiles('**\env.lock') }}-${{ hashFiles('**\vcpkg.lock') }}
        restore-keys: vcpkg-${{ hashFiles('**\env.lock') }}-
        
    - name: vcpkg install
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      shell: bash
      run: |
        source env.sh
        if cd vcpkg; then
          git fetch
        else
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
        fi
        git reset --hard $VCPKG_GIT_HASH
        if [ "$RUNNER_OS" = "Windows"]; then export VCPKG_TRIPLET=--triplet x86-windows; fi
        "$VCPKG_INSTALLATION_ROOT/vcpkg" install $VCPKG_TRIPLET $VCPKG_DEPS
        "$VCPKG_INSTALLATION_ROOT/vcpkg" upgrade --no-dry-run
        rm -rf downloads buildtrees packages
        
    - name: visual studio modules cache
      if: runner.os == 'Windows'
      uses: actions/cache@v1
      id: cache-vsmodules
      with:
        path: ${{ steps.init.outputs.vsmodules-dir }}
        key: ${{ runner.os }}-vsmodules-${{ hashFiles('**\vsmodules.lock') }}
        
    - name: install visual studio modules
      if: runner.os == 'Windows' && steps.cache-vsmodules.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "dummy" # workaround for a bug in parsing the yaml file
        
        # install the pre-built standard library modules and cache them, the tests use this
        "C:/Program Files (x86)/Microsoft Visual Studio/Installer/vs_installer.exe" modify --quiet --norestart \
          --installPath="C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise" \
          --add Microsoft.VisualStudio.Component.VC.Modules.x86.x64
        
        if [ ! -d "${{ steps.init.outputs.vsmodules-dir }}" ]; then
          echo failed; exit 1;
        fi
        
    - name: build
      shell: bash
      run: |
        source env.sh
        mkdir build
        cd build
        export VCPKG_ARG=-DCMAKE_TOOLCHAIN_FILE="../vcpkg/scripts/buildsystems/vcpkg.cmake"
        if [ "$RUNNER_OS" = "Windows" ]; then
          # the dll that is loaded by the msbuild task needs to be Win32
          cmake $VCPKG_ARG -G "Visual Studio 16 2019" -A "Win32" ..
          cmake --build . --config "Debug" --parallel
          cmake --install . --config "Debug"
        else
          cmake $VCPKG_ARG -G "Ninja" -DCMAKE_BUILD_TYPE=Debug ..
          #  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build . --parallel
          cmake_path=`which cmake` # sudo changes the path and we have cmake 3.12 installed by default
          sudo $cmake_path --install .
        fi
    
    - name: test
      shell: bash
      run: |
        source env.sh
        
        if [ ! -d llvm-build ]; then
          if [ "$RUNNER_OS" != "Windows" ]; then
            mv csd/scan/* .
          fi
          mkdir -p llvm-build/bin
          mv csd/clang-scan-deps* llvm-build/bin
        fi
        
        TESTS="[lmdb],[scanner],[gen_ninja]"
        if [ "$RUNNER_OS" = "Windows" ]; then
          TESTS="$TESTS,[msbuild]"
          CONFIG_DIR="Debug"
          CLANG_PATH="`which clang++.exe`"
        else
          CONFIG_DIR=
          CLANG_PATH="`which clang++-9`"
        fi
        
        build/src/test/$CONFIG_DIR/cppm_test $TESTS \
          --scanner_tool_path=build/src/scanner/$CONFIG_DIR/cppm_scanner_tool${{ matrix.exe-suffix }} \
          --ninja_fork_path=build/_deps/ninja-build/$CONFIG_DIR/ninja${{ matrix.exe-suffix }} \
          --clang_scan_deps_path=llvm-build/bin/clang-scan-deps${{ matrix.exe-suffix }} \
          --system_test_path=tests \
          --clang_cxx_path="$CLANG_PATH"
        
        if [ "$RUNNER_OS" = "Windows" ]; then exit 0; fi
        
        cd llvm-build
        mkdir -p tools/clang/tools/extra/clangd/fuzzer #workaround for an include bug
        mkdir -p tools/clang/tools/extra/clangd/tool #same
        ../build/src/test/$TEST_DRIVER [scanner_comp_db] \
          --scanner_comp_db=compile_commands.json \
          --scanner_db_path="." --scanner_item_root_path="." \
          --scanner_file_to_touch=../llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp \
          --clang_scan_deps_path=bin/clang-scan-deps${{ matrix.exe-suffix }}